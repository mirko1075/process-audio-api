openapi: 3.1.0
info:
  title: AI Medical Transcription Backend
  description: |
    A production-ready Flask backend for transcribing, translating and analysing
    medical conversations. The service integrates with Deepgram Nova-2 for
    transcription, OpenAI GPT models for translation, and optional AssemblyAI /
    Google Cloud services.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://your-production-url.com
    description: Production server

security:
  - ApiKeyAuth: []
  - BearerAuth: []

paths:
  /auth/register:
    post:
      summary: Register new user
      description: Create a new user account with email and password
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  description: User password (minimum 8 characters)
                  example: "password123"
                first_name:
                  type: string
                  description: User first name
                  example: "John"
                last_name:
                  type: string
                  description: User last name
                  example: "Doe"
                company:
                  type: string
                  description: User company name
                  example: "Acme Corp"
                plan:
                  type: string
                  enum: [free, pro, enterprise]
                  default: free
                  description: User subscription plan
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request (email already exists, missing fields, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: User login
      description: Authenticate user with email and password to receive JWT token
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  description: User password
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  access_token:
                    type: string
                    description: JWT access token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      summary: Get user profile
      description: Get current user profile information and API keys
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  api_keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKey'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/api-keys:
    post:
      summary: Create new API key
      description: Generate a new API key for the current user
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name/description for the API key
                  example: "Production Integration"
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "API key created successfully"
                  api_key:
                    type: string
                    description: The generated API key (shown only once)
                    example: "usr_123_AbCdEf123456..."
                  name:
                    type: string
                    example: "Production Integration"
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/api-keys/{keyId}:
    delete:
      summary: Deactivate API key
      description: Deactivate a specific API key belonging to the current user
      tags:
        - Authentication
      security:
        - BearerAuth: []
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: integer
          description: API key ID to deactivate
          example: 123
      responses:
        '200':
          description: API key deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "API key deactivated"
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user-config/providers:
    get:
      summary: Get available AI providers
      description: Get list of all available AI providers and their models for configuration
      tags:
        - User Configuration
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Providers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  providers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Provider'

  /user-config/provider-configs:
    get:
      summary: Get user's provider configurations
      description: Get current user's API key configurations and usage statistics for all providers
      tags:
        - User Configuration
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Configurations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  configurations:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserProviderConfig'
    
    post:
      summary: Create/Update provider configuration
      description: Add or update API key for a specific provider. Users must provide their own API keys for SaaS usage.
      tags:
        - User Configuration
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - provider_id
                - api_key
              properties:
                provider_id:
                  type: integer
                  description: Provider ID from the available providers list
                  example: 1
                api_key:
                  type: string
                  description: User's API key for the provider
                  example: "sk-1234567890abcdef"
                default_model_id:
                  type: integer
                  description: Default model ID for this provider (optional)
                  example: 3
      responses:
        '201':
          description: Provider configuration created/updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OpenAI configuration created successfully"
                  configuration:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      provider:
                        type: string
                        example: "OpenAI"
                      api_key_preview:
                        type: string
                        example: "sk-****1234"
                      default_model:
                        type: string
                        example: "Whisper v1"
        '400':
          description: Bad request - invalid provider, API key format, etc.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Configuration already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user-config/provider-configs/{configId}:
    put:
      summary: Update provider configuration
      description: Update specific provider configuration (model preference, API key, etc.)
      tags:
        - User Configuration
      security:
        - BearerAuth: []
      parameters:
        - name: configId
          in: path
          required: true
          schema:
            type: integer
          description: Configuration ID to update
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                api_key:
                  type: string
                  description: New API key for the provider
                  example: "sk-new1234567890abcdef"
                default_model_id:
                  type: integer
                  description: New default model ID
                  example: 5
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Configuration updated successfully"
                  configuration:
                    $ref: '#/components/schemas/UserProviderConfig'
    
    delete:
      summary: Deactivate provider configuration
      description: Deactivate a provider configuration (soft delete)
      tags:
        - User Configuration
      security:
        - BearerAuth: []
      parameters:
        - name: configId
          in: path
          required: true
          schema:
            type: integer
          description: Configuration ID to deactivate
          example: 1
      responses:
        '200':
          description: Configuration deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Configuration deactivated successfully"

  /user-config/provider-configs/{configId}/test:
    post:
      summary: Test provider configuration
      description: Test a provider configuration by making a simple API call to verify the API key
      tags:
        - User Configuration
      security:
        - BearerAuth: []
      parameters:
        - name: configId
          in: path
          required: true
          schema:
            type: integer
          description: Configuration ID to test
          example: 1
      responses:
        '200':
          description: API key test successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OpenAI API key test successful"
                  provider:
                    type: string
                    example: "OpenAI"
                  status:
                    type: string
                    example: "active"

  /user-config/usage-stats:
    get:
      summary: Get usage statistics
      description: Get user's usage statistics across all configured providers
      tags:
        - User Configuration
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Usage statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageStatistics'
  /:
    get:
      summary: Root endpoint
      description: Welcome message and API information
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Welcome message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "AI Medical Transcription Backend"

  /health:
    get:
      summary: Health check endpoint
      description: Return a simple health payload used by orchestrators
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"

  /transcriptions/deepgram:
    post:
      summary: Transcribe audio using Deepgram Nova-2 with speaker diarization
      description: Upload an audio file to transcribe using Deepgram's Nova-2 model with optional speaker diarization and enhanced formatting
      tags:
        - Transcription
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - audio
              properties:
                audio:
                  type: string
                  format: binary
                  description: Audio file to transcribe
                language:
                  type: string
                  default: "en"
                  description: Language code for transcription
                  example: "en"
                model:
                  type: string
                  default: "nova-2"
                  description: Deepgram model to use
                  example: "nova-2"
                diarize:
                  type: boolean
                  default: false
                  description: Enable speaker diarization to identify different speakers
                  example: true
                punctuate:
                  type: boolean
                  default: true
                  description: Enable smart punctuation in transcription
                  example: true
                paragraphs:
                  type: boolean
                  default: false
                  description: Enable paragraph detection for better text formatting
                  example: false
      responses:
        '200':
          description: Transcription successful with optional speaker diarization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeepgramTranscriptionResponse'
        '400':
          description: Bad request - no audio file uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Transcription failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transcriptions/whisper:
    post:
      summary: Transcribe audio using OpenAI Whisper with automatic chunking
      description: |
        Upload an audio file to transcribe using OpenAI's Whisper model. 
        Large files (>24MB) are automatically split into 10-minute chunks and processed sequentially.
        The service handles files of any size without manual intervention.
      tags:
        - Transcription
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - audio
              properties:
                audio:
                  type: string
                  format: binary
                  description: Audio file to transcribe
                language:
                  type: string
                  description: Language code for transcription (optional)
                  example: "en"
      responses:
        '200':
          description: Transcription successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranscriptionResponse'
        '400':
          description: Bad request - no audio file uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Transcription failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transcriptions/assemblyai:
    post:
      summary: Transcribe audio using AssemblyAI
      description: Upload an audio file to transcribe using AssemblyAI service
      tags:
        - Transcription
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - audio
              properties:
                audio:
                  type: string
                  format: binary
                  description: Audio file to transcribe
                language:
                  type: string
                  default: "en"
                  description: Language code for transcription
                  example: "en"
      responses:
        '200':
          description: Transcription successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranscriptionResponse'
        '400':
          description: Bad request - no audio file uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Transcription failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transcriptions/transcribe-and-translate:
    post:
      summary: Combined transcription and translation
      description: Transcribe an audio file and optionally translate the result in one call
      tags:
        - Transcription
        - Translation
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - audio
              properties:
                audio:
                  type: string
                  format: binary
                  description: Audio file to transcribe
                translate:
                  type: string
                  enum: ["true", "false"]
                  default: "false"
                  description: Whether to translate the transcription
                transcript_model:
                  type: string
                  enum: ["deepgram", "whisper", "assemblyai"]
                  default: "deepgram"
                  description: Transcription service to use
                translation_model:
                  type: string
                  enum: ["google", "openai"]
                  default: "google"
                  description: Translation service to use (if translate=true)
                language:
                  type: string
                  default: "en"
                  description: Source language code
                target_language:
                  type: string
                  default: "en"
                  description: Target language code for translation
      responses:
        '200':
          description: Transcription and optional translation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  formatted_transcript_array:
                    type: array
                    items:
                      type: string
                    description: Array of formatted transcript segments
                  transcript:
                    type: string
                    description: Complete transcription text
                  translated_text:
                    type: string
                    nullable: true
                    description: Translated text (if translation was requested)
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Processing failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transcriptions/video:
    post:
      summary: Transcribe video from URL or uploaded file
      description: |
        Transcribe video content using Whisper with automatic language detection.
        Supports YouTube URLs, direct video URLs, and uploaded video files.
      tags:
        - Transcription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - video_url
              properties:
                video_url:
                  type: string
                  format: uri
                  description: URL of the video to transcribe (YouTube, etc.)
                  example: "https://www.youtube.com/watch?v=example"
                language:
                  type: string
                  nullable: true
                  description: Language code for transcription (null for auto-detect)
                  example: "en"
                model_size:
                  type: string
                  enum: [tiny, base, small, medium, large]
                  default: base
                  description: Whisper model size (accuracy vs speed trade-off)
          multipart/form-data:
            schema:
              type: object
              required:
                - video
              properties:
                video:
                  type: string
                  format: binary
                  description: Video file to transcribe
                language:
                  type: string
                  description: Language code for transcription (auto-detect if not provided)
                  example: "en"
                model_size:
                  type: string
                  enum: [tiny, base, small, medium, large]
                  default: base
                  description: Whisper model size
      responses:
        '200':
          description: Video transcription successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  transcript:
                    type: string
                    description: Complete transcription text
                  confidence:
                    type: number
                    format: float
                    description: Average confidence score (0.0-1.0)
                  detected_language:
                    type: string
                    description: Auto-detected or specified language
                  model:
                    type: string
                    description: Whisper model used
                    example: "whisper-base"
                  service:
                    type: string
                    example: "whisper-video"
                  source:
                    type: string
                    enum: [video_url, video_file]
                    description: Source type of the video
                  word_count:
                    type: integer
                    description: Number of words in transcript
                  transcription_time:
                    type: number
                    format: float
                    description: Time taken for transcription in seconds
                  formatted_transcript_array:
                    type: array
                    items:
                      type: object
                      properties:
                        text:
                          type: string
                    description: Array of formatted transcript segments
                  video_title:
                    type: string
                    nullable: true
                    description: Video title (for URL sources)
                  video_duration:
                    type: number
                    format: float
                    description: Video duration in seconds
                  video_uploader:
                    type: string
                    nullable: true
                    description: Video uploader (for URL sources)
                  filename:
                    type: string
                    nullable: true
                    description: Original filename (for file uploads)
                  file_size:
                    type: integer
                    nullable: true
                    description: File size in bytes (for file uploads)
                  segments:
                    type: array
                    items:
                      type: object
                      properties:
                        start:
                          type: number
                          format: float
                        end:
                          type: number
                          format: float
                        text:
                          type: string
                        confidence:
                          type: number
                          format: float
                    description: Detailed transcript segments with timestamps
        '400':
          description: Bad request - invalid video URL or file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Video processing failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /translations/openai:
    post:
      summary: Translate text using OpenAI GPT
      description: Translate text from one language to another using OpenAI's GPT models
      tags:
        - Translation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Text to translate
                  example: "Hello, how are you?"
                source_language:
                  type: string
                  default: "auto"
                  description: Source language code
                  example: "en"
                target_language:
                  type: string
                  default: "en"
                  description: Target language code
                  example: "es"
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Text to translate
                source_language:
                  type: string
                  default: "auto"
                  description: Source language code
                target_language:
                  type: string
                  default: "en"
                  description: Target language code
      responses:
        '200':
          description: Translation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationResponse'
        '400':
          description: Translation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /translations/google:
    post:
      summary: Translate text using Google Translate
      description: Translate text using Google Cloud Translation service
      tags:
        - Translation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Text to translate
                  example: "Hello, how are you?"
                target_language:
                  type: string
                  default: "en"
                  description: Target language code
                  example: "es"
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Text to translate
                target_language:
                  type: string
                  default: "en"
                  description: Target language code
      responses:
        '200':
          description: Translation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationResponse'
        '400':
          description: Translation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /translations/deepseek:
    post:
      summary: Translate text using DeepSeek AI
      description: Medical text translation using DeepSeek with support for Asian languages and external integrations
      tags:
        - Translation
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Text to translate
                source_language:
                  type: string
                  default: "auto"
                  description: Source language code
                  example: "th"
                target_language:
                  type: string
                  default: "en"
                  description: Target language code
                  example: "en"
                fileName:
                  type: string
                  description: File name for external integrations
                duration:
                  type: string
                  description: Duration for external integrations
                driveId:
                  type: string
                  description: Drive ID for external integrations
                groupId:
                  type: string
                  description: Group ID for external integrations
                folderId:
                  type: string
                  description: Folder ID for external integrations
                fileId:
                  type: string
                  description: File ID for external integrations
                projectName:
                  type: string
                  description: Project name for external integrations
                isDev:
                  type: string
                  enum: ["true", "false"]
                  default: "false"
                  description: Development mode flag
                isLocal:
                  type: string
                  enum: ["true", "false"]
                  default: "false"
                  description: Local mode flag
      responses:
        '200':
          description: Translation successful
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      translated_text:
                        type: string
                        description: Translated text (for local mode)
                  - type: object
                    properties:
                      message:
                        type: string
                        description: Confirmation message (for external integration)
                        example: "Request sent to external service"
        '400':
          description: Translation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sentiment:
    post:
      summary: Analyze sentiment of text
      description: Perform medical sentiment analysis on provided text
      tags:
        - Post-processing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Text to analyze for sentiment
                  example: "The patient seems to be feeling much better today."
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Text to analyze for sentiment
      responses:
        '200':
          description: Sentiment analysis successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SentimentResponse'
        '400':
          description: Bad request - missing text
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /documents/word:
    post:
      summary: Generate Word document
      description: Create a DOCX document from provided text content
      tags:
        - Post-processing
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: Text content for the document
                  example: "This is the content of the medical transcript..."
                fileName:
                  type: string
                  default: "report.docx"
                  description: Name of the generated file
                  example: "medical_report.docx"
      responses:
        '200':
          description: Document generated successfully
          content:
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /reports/excel:
    post:
      summary: Generate Excel report
      description: Build an Excel workbook with multiple sheets from provided data
      tags:
        - Post-processing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sheets
              properties:
                sheets:
                  type: array
                  description: Array of sheet data for the Excel workbook
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: Sheet name
                        example: "Summary"
                      data:
                        type: array
                        description: Sheet data as array of rows
                        items:
                          type: array
                          items:
                            oneOf:
                              - type: string
                              - type: number
                        example: [["Header 1", "Header 2"], ["Value 1", "Value 2"]]
      responses:
        '200':
          description: Excel report generated successfully
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request - invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /utilities/audio-duration:
    post:
      summary: Get audio file duration
      description: Upload an audio file to get its duration in minutes
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - audio
              properties:
                audio:
                  type: string
                  format: binary
                  description: Audio file to analyze
      responses:
        '200':
          description: Duration calculated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Audio processed successfully"
                  duration_minutes:
                    type: number
                    format: float
                    description: Duration of the audio file in minutes
                    example: 15.5
        '400':
          description: Bad request - no audio file or analysis failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Error processing audio file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /utilities/log-usage:
    post:
      summary: Log audio usage for billing
      description: Log audio processing usage to Google Sheets for billing purposes
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - user_code
                - fileName
                - duration
              properties:
                user_code:
                  type: string
                  description: User identifier for billing
                  example: "user123"
                fileName:
                  type: string
                  description: Name of the processed file
                  example: "medical_interview.mp3"
                duration:
                  type: string
                  description: Duration in minutes
                  example: "15.5"
      responses:
        '200':
          description: Usage logged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "File processed successfully"
                  user_code:
                    type: string
                    example: "user123"
                  filename:
                    type: string
                    example: "medical_interview.mp3"
                  duration:
                    type: number
                    format: float
                    example: 15.5
                  cost_per_minute:
                    type: string
                    example: "0.20"
                  total_cost:
                    type: string
                    example: "3.10"
                  Billed:
                    type: string
                    example: "YES"
        '400':
          description: Bad request - missing required parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Error logging usage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /utilities/text-file:
    post:
      summary: Create downloadable text file
      description: Generate a downloadable text file from provided content
      tags:
        - Utilities
      security: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Text content for the file
                  example: "This is the content of the text file..."
                filename:
                  type: string
                  default: "output.txt"
                  description: Desired filename (will add .txt extension if missing)
                  example: "medical_notes.txt"
      responses:
        '200':
          description: Text file generated successfully
          content:
            text/plain:
              schema:
                type: string
                format: binary
                description: Downloadable text file
        '400':
          description: Bad request - no text content provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error creating text file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: API key required for all endpoints except health check and authentication
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for user authentication

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: User ID
          example: 123
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        first_name:
          type: string
          description: User first name
          example: "John"
        last_name:
          type: string
          description: User last name
          example: "Doe"
        company:
          type: string
          description: User company name
          example: "Acme Corp"
        plan:
          type: string
          enum: [free, pro, enterprise, legacy]
          description: User subscription plan
          example: "pro"
        is_active:
          type: boolean
          description: Whether the user account is active
          example: true
        email_verified:
          type: boolean
          description: Whether the user email is verified
          example: true
        created_at:
          type: string
          format: date-time
          description: User registration timestamp
          example: "2023-10-16T19:35:02.584833"
        last_login:
          type: string
          format: date-time
          nullable: true
          description: Last login timestamp
          example: "2023-10-16T19:36:22.951768"
        api_calls_month:
          type: integer
          description: Number of API calls made this month
          example: 150
        audio_minutes_month:
          type: number
          format: float
          description: Minutes of audio processed this month
          example: 45.5

    ApiKey:
      type: object
      properties:
        id:
          type: integer
          description: API key ID
          example: 456
        name:
          type: string
          description: API key name/description
          example: "Production Integration"
        key_preview:
          type: string
          description: Partial API key for display (security)
          example: "usr_123_****"
        is_active:
          type: boolean
          description: Whether the API key is active
          example: true
        created_at:
          type: string
          format: date-time
          description: API key creation timestamp
          example: "2023-10-16T19:35:02.584833"
        last_used:
          type: string
          format: date-time
          nullable: true
          description: Last usage timestamp
          example: "2023-10-16T19:36:22.951768"
        usage_count:
          type: integer
          description: Number of times this key has been used
          example: 87
        expires_at:
          type: string
          format: date-time
          nullable: true
          description: API key expiration timestamp (if any)
          example: null

    AuthResponse:
      type: object
      properties:
        message:
          type: string
          example: "User registered successfully"
        access_token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        api_key:
          type: string
          description: Generated API key (shown only once)
          example: "usr_123_AbCdEf123456789..."
        user:
          $ref: '#/components/schemas/User'

    Provider:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "openai"
        display_name:
          type: string
          example: "OpenAI"
        description:
          type: string
          example: "OpenAI API services for transcription and translation"
        website_url:
          type: string
          example: "https://openai.com"
        documentation_url:
          type: string
          example: "https://platform.openai.com/docs"
        is_active:
          type: boolean
          example: true
        models:
          type: array
          items:
            $ref: '#/components/schemas/ProviderModel'
    
    ProviderModel:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "whisper-1"
        display_name:
          type: string
          example: "Whisper v1"
        type:
          type: string
          example: "transcription"
        cost_per_unit:
          type: number
          format: float
          example: 0.006
        cost_unit:
          type: string
          example: "minute"
        max_file_size_mb:
          type: integer
          example: 25
        supported_formats:
          type: string
          description: JSON array of supported file formats
          example: '["mp3", "wav", "m4a"]'
        is_active:
          type: boolean
          example: true
    
    UserProviderConfig:
      type: object
      properties:
        id:
          type: integer
          example: 1
        provider:
          $ref: '#/components/schemas/Provider'
        api_key_preview:
          type: string
          description: Masked API key for display
          example: "sk-****1234"
        is_active:
          type: boolean
          example: true
        default_model:
          $ref: '#/components/schemas/ProviderModel'
        total_requests:
          type: integer
          description: Total API requests made with this provider
          example: 150
        total_cost_usd:
          type: number
          format: float
          description: Total cost in USD
          example: 45.67
        total_audio_minutes:
          type: number
          format: float
          description: Total audio minutes processed
          example: 125.5
        total_tokens_processed:
          type: integer
          description: Total tokens processed (for text-based services)
          example: 50000
        last_used:
          type: string
          format: date-time
          nullable: true
          description: Last time this configuration was used
          example: "2023-10-16T19:36:22.951768"
        created_at:
          type: string
          format: date-time
          example: "2023-10-16T19:35:02.584833"
        updated_at:
          type: string
          format: date-time
          example: "2023-10-16T19:35:02.584833"

    UsageStatistics:
      type: object
      properties:
        total_requests:
          type: integer
          description: Total requests across all providers
          example: 500
        total_cost_usd:
          type: number
          format: float
          description: Total cost across all providers
          example: 125.50
        total_audio_minutes:
          type: number
          format: float
          description: Total audio minutes processed
          example: 300.5
        total_tokens_processed:
          type: integer
          description: Total tokens processed across all providers
          example: 100000
        providers_configured:
          type: integer
          description: Number of providers configured
          example: 3
        by_provider:
          type: array
          description: Usage breakdown by provider
          items:
            type: object
            properties:
              provider:
                type: string
                example: "OpenAI"
              requests:
                type: integer
                example: 200
              cost_usd:
                type: number
                format: float
                example: 60.25
              audio_minutes:
                type: number
                format: float
                example: 120.5
              tokens_processed:
                type: integer
                example: 40000
              last_used:
                type: string
                format: date-time
                nullable: true
                example: "2023-10-16T19:36:22.951768"
    TranscriptionResponse:
      type: object
      properties:
        text:
          type: string
          description: Transcribed text
          example: "Hello, this is a sample transcription of the audio file."
        transcript:
          type: string
          description: Alternative key for transcribed text (used by some services)
          example: "Hello, this is a sample transcription of the audio file."
        confidence:
          type: number
          format: float
          description: Confidence score of the transcription
          example: 0.95
        language:
          type: string
          description: Detected or specified language
          example: "en"
        duration:
          type: number
          format: float
          description: Duration of the audio in seconds
          example: 30.5
        chunks_processed:
          type: integer
          description: Number of chunks processed (only for large files processed with chunking)
          example: 3
        total_chunks:
          type: integer
          description: Total number of chunks created (only for large files processed with chunking)
          example: 3
        chunk_duration_minutes:
          type: integer
          description: Duration of each chunk in minutes (only for chunked processing)
          example: 10
      required:
        - transcript

    DeepgramTranscriptionResponse:
      type: object
      properties:
        transcript:
          type: string
          description: Transcribed text from Deepgram
          example: "Hello, this is a conversation between two speakers."
        confidence:
          type: number
          format: float
          description: Overall confidence score
          example: 0.92
        language:
          type: string
          description: Detected or specified language
          example: "en"
        model:
          type: string
          description: Deepgram model used
          example: "nova-2"
        service:
          type: string
          description: Service identifier
          example: "deepgram"
        word_count:
          type: integer
          description: Number of words in the transcript
          example: 42
        duration_seconds:
          type: number
          format: float
          description: Duration of the audio in seconds
          example: 25.4
        processing_info:
          type: object
          properties:
            service:
              type: string
              example: "deepgram"
            model_used:
              type: string
              example: "nova-2"
            language_requested:
              type: string
              example: "en"
            diarization_enabled:
              type: boolean
              example: true
            paragraphs_enabled:
              type: boolean
              example: false
        diarization:
          type: object
          description: Speaker diarization data (only present when diarization is enabled)
          properties:
            speakers_detected:
              type: integer
              description: Number of unique speakers detected
              example: 2
            total_duration:
              type: number
              format: float
              description: Total duration in seconds
              example: 25.4
            speakers:
              type: array
              description: Statistics for each speaker
              items:
                type: object
                properties:
                  speaker_id:
                    type: string
                    description: Unique speaker identifier
                    example: "Speaker_0"
                  total_words:
                    type: integer
                    description: Total words spoken by this speaker
                    example: 25
                  total_duration:
                    type: number
                    format: float
                    description: Total speaking time in seconds
                    example: 12.5
                  average_confidence:
                    type: number
                    format: float
                    description: Average confidence for this speaker
                    example: 0.91
                  speaking_percentage:
                    type: number
                    format: float
                    description: Percentage of total speaking time
                    example: 49.2
            segments:
              type: array
              description: Speaker segments with timestamps
              items:
                type: object
                properties:
                  speaker:
                    type: string
                    description: Speaker identifier
                    example: "Speaker_0"
                  speaker_id:
                    type: integer
                    description: Numeric speaker ID
                    example: 0
                  text:
                    type: string
                    description: Text spoken by this speaker in this segment
                    example: "Hello, how are you today?"
                  start_time:
                    type: number
                    format: float
                    description: Start time in seconds
                    example: 0.5
                  end_time:
                    type: number
                    format: float
                    description: End time in seconds
                    example: 3.2
                  duration:
                    type: number
                    format: float
                    description: Duration of this segment in seconds
                    example: 2.7
                  word_count:
                    type: integer
                    description: Number of words in this segment
                    example: 5
        paragraphs:
          type: array
          description: Paragraph data (only present when paragraphs are enabled)
          items:
            type: object
            properties:
              paragraph_id:
                type: integer
                description: Sequential paragraph number
                example: 1
              text:
                type: string
                description: Paragraph text
                example: "This is the first paragraph of the transcription."
              start_time:
                type: number
                format: float
                description: Paragraph start time in seconds
                example: 0.0
              end_time:
                type: number
                format: float
                description: Paragraph end time in seconds
                example: 5.2
              duration:
                type: number
                format: float
                description: Paragraph duration in seconds
                example: 5.2
              word_count:
                type: integer
                description: Number of words in the paragraph
                example: 8
      required:
        - transcript
        - confidence
        - service

      TranslationResponse:
        type: object
        properties:
          translated_text:
            type: string
            description: The translated text
            example: "El paciente presenta dolor en el pecho y niveles elevados de troponina"
          source_language:
            type: string
            description: Source language of the original text
            example: "English"
          target_language:
            type: string
            description: Target language for translation
            example: "Spanish"
          model_used:
            type: string
            description: The translation model/service used
            example: "gpt-4o-mini"
          chunks_processed:
            type: integer
            description: Number of text chunks processed (only present for long texts)
            example: 3
          total_chunks:
            type: integer
            description: Total number of chunks the text was split into (only present for long texts)
            example: 3
        required:
          - translated_text
          - source_language
          - target_language
          - model_used

      SentimentResponse:
        type: object
        properties:
        sentiment:
          type: string
          enum: ["positive", "negative", "neutral"]
          description: Overall sentiment classification
          example: "positive"
        confidence:
          type: number
          format: float
          description: Confidence score for sentiment classification
          example: 0.87
          minimum: 0
          maximum: 1
        scores:
          type: object
          description: Detailed sentiment scores
          properties:
            positive:
              type: number
              format: float
              example: 0.75
            negative:
              type: number
              format: float
              example: 0.15
            neutral:
              type: number
              format: float
              example: 0.10
        required:
          - sentiment

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message describing what went wrong
          example: "Invalid or missing API key"
      required:
        - error

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Invalid or missing API key"

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: User authentication and API key management
  - name: User Configuration
    description: Provider configuration and API key management for SaaS
  - name: Transcription
    description: Audio transcription services
  - name: Translation
    description: Text translation services
  - name: Post-processing
    description: Sentiment analysis and document generation